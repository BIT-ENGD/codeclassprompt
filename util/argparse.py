import argparse



def get_arg(): 
    parser=argparse.ArgumentParser()
    parser.add_argument("--plm_name",                       type=str,default="roberta-large")      #"microsoft/codebert-base-mlm")
    parser.add_argument("--log_dir",                        type=str,default="logs")
    parser.add_argument("--appname",                        type=str,default="codeprompt")
    parser.add_argument("--model_name",                     type=str,default="codeprompt",choices=["self","bundle","ffn"])
    parser.add_argument("--dataset",                        type=str,default="CODE")
    parser.add_argument("--seed",                           type=int,default=144)
    parser.add_argument("--shot",                           type=int,default=5)
    parser.add_argument("--max_epochs",                     type=int,default=5)
    parser.add_argument("--device",                         type=str,default="cuda")
    #parser.add_argument("--prompt_lr",                      type=float, default=0.3)
    parser.add_argument("--warmup_step_prompt",             type=int, default=500)
    parser.add_argument("--soft_token_num",                 type=int, default=20)
    parser.add_argument("--gradient_accumulation_steps",    type=int, default=1)
    parser.add_argument("--plm_eval_mode",                  action="store_true")
    parser.add_argument("--dev_mode",                       action="store_true")
    parser.add_argument("--tune_plm",                       action="store_true")
    parser.add_argument("--optimizer",                      type=str,default="adamw",help="adamw,adafactor")
    parser.add_argument("--action",                         type=str,default="codeprompt",  choices=["codeprompt","verbalizer","zeroshot"],    help="")
    parser.add_argument("--method",                         type=str,default="fewshot",     choices=["fewshot","zeroshot"],         help="")
    parser.add_argument("--multi_handler",                  type=str,default="first",     choices=["first","mean","max"],         help="")
    parser.add_argument("--max_token_split",                default=-1, type=int)
    parser.add_argument("--support_num",                    type=int,default=5)
    parser.add_argument("--cali_support_num",               type=int,default=200)
    parser.add_argument("--num_per_class",                  type=int,default=50)
    parser.add_argument("--imbalance",                      action="store_true")
    parser.add_argument("--test_only",                      action="store_true")
    parser.add_argument("--save_bad_case",                  action="store_true")
    parser.add_argument("--word_calibration",               action="store_true")
    parser.add_argument("--nocut",                         action="store_true")
    parser.add_argument("--template_id",                    type=int,default=-1)
    parser.add_argument("--verbalizer",                      type=str,default="kpt")
    parser.add_argument("--lr", type=float,default=3e-5, help="learning rate")  #original 0.06 
    #parser.add_argument("--learning_rate", default=3e-5, type=float)  # 5e-5, bert 1e-5, t5 1e-4,
    parser.add_argument("--weight_decay", default=0.01, type=float)
    parser.add_argument("--adam_epsilon", default=1e-8, type=float)
    parser.add_argument("--max_grad_norm", default=5.0, type=float)
    parser.add_argument("--warmup_ratio", default=0.1, type=float)
    parser.add_argument("--group_num", default=1, type=int)
    parser.add_argument("--full_mode",                      action="store_true")
    parser.add_argument("--layer_num", default=1, type=int,help="The number of layers from the last layer to the number of layers.")
    parser.add_argument("--soft_prompt",                      action="store_true")
    parser.add_argument("--batch_size", default=0, type=int)
    parser.add_argument("--max_length", default=0, type=int)
    parser.add_argument("--att_visual",  action="store_true")
    parser.add_argument("--att_visual_id",  default=0, type=int)
    parser.add_argument("--time_test",  action="store_true")
    return parser.parse_args()